---
// V2 CodeHook Dispatcher - With Examples
// Framework components and custom examples are available

import CustomHero from './CustomHero.astro';
import FeaturedContent from '@/components/codehooks/FeaturedContent.astro';
import ListContent from '@/components/codehooks/ListContent.astro';
import BunnyVideoWrapper from '@/components/codehooks/BunnyVideoWrapper.astro';
import EpinetWrapper from '@/components/codehooks/EpinetWrapper';
import type { FullContentMapItem } from 'templates/src/types/tractstack';

export interface Props {
  target: string;
  fullContentMap: FullContentMapItem[];
  options?: {
    params?: {
      options?: string;
    };
  };
}

const { target, options, fullContentMap } = Astro.props;

const goBackend = import.meta.env.PUBLIC_GO_BACKEND || 'http://localhost:8080';
const dashboardData = await fetch(
  `${goBackend}/api/v1/analytics/dashboard?duration=monthly`
).then((r) => r.json());
const hotContent = dashboardData?.hot_content || [];

export const components = {
  'custom-hero': true,
  'featured-content': true,
  'list-content': true,
  'bunny-video': true,
  epinet: true,
};
---

{
  target === 'list-content' ? (
    <ListContent
      options={options}
      contentMap={fullContentMap}
      hotContent={hotContent}
    />
  ) : target === 'featured-content' ? (
    <FeaturedContent options={options} contentMap={fullContentMap} />
  ) : target === 'bunny-video' ? (
    <BunnyVideoWrapper options={options} />
  ) : target === 'custom-hero' ? (
    <CustomHero />
  ) : target === 'epinet' ? (
    <EpinetWrapper fullContentMap={fullContentMap} client:only="react" />
  ) : (
    <div class="rounded-lg bg-gray-50 p-8 text-center">
      <p class="text-gray-600">CodeHook target "{target}" not found</p>
    </div>
  )
}
