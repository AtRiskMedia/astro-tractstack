---
import CustomHero from './CustomHero.astro';
import FeaturedContent from '@/components/codehooks/FeaturedContent.astro';
import ListContent from '@/components/codehooks/ListContent.astro';
import BunnyVideoWrapper from '@/components/codehooks/BunnyVideoWrapper.astro';
import EpinetWrapper from '@/components/codehooks/EpinetWrapper';
import type { FullContentMapItem } from '@/types/tractstack';
import type { ResourceNode } from '@/types/compositorTypes';

export interface Props {
  target: string;
  fullContentMap: FullContentMapItem[];
  resourcesPayload?: Record<string, ResourceNode[]>;
  options?: {
    params?: {
      options?: string;
    };
  };
}

const { target, options, fullContentMap /*, resourcesPayload */ } = Astro.props;

const enableBunny = import.meta.env.PUBLIC_ENABLE_BUNNY === 'true';

export const components = {
  'custom-hero': true,
  'featured-content': true,
  'list-content': true,
  ...(enableBunny && { 'bunny-video': true }),
  epinet: true,
};
---

{
  target === 'list-content' ? (
    <ListContent options={options} contentMap={fullContentMap} />
  ) : target === 'featured-content' ? (
    <FeaturedContent options={options} contentMap={fullContentMap} />
  ) : target === 'bunny-video' && enableBunny ? (
    <BunnyVideoWrapper options={options} />
  ) : target === 'custom-hero' ? (
    <CustomHero />
  ) : target === 'epinet' ? (
    <EpinetWrapper fullContentMap={fullContentMap} client:only="react" />
  ) : (
    <div class="rounded-lg bg-gray-50 p-8 text-center">
      <p class="text-gray-600">CodeHook target "{target}" not found</p>
    </div>
  )
}
