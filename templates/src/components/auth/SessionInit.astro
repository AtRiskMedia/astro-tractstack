---
// Auto-trigger visit handshake on page load - client-side session persistence
---

<script>
  //console.log('SessionInit script loaded!');

  // Initialize session when DOM is ready
  document.addEventListener('DOMContentLoaded', function () {
    //console.log('DOMContentLoaded fired, calling initializeSession');
    initializeSession();
  });

  async function initializeSession() {
    //console.log('initializeSession started');

    // Wait for configuration to be available
    if (!window.TRACTSTACK_CONFIG?.configured) {
      //console.log('TRACTSTACK_CONFIG not ready, retrying...');
      setTimeout(initializeSession, 100);
      return;
    }

    //console.log('TRACTSTACK_CONFIG ready:', window.TRACTSTACK_CONFIG);

    try {
      // Get or create persistent sessionId
      const sessionId = getOrCreateSessionId();
      //console.log('Generated sessionId:', sessionId);

      // Prepare session data (session-only, no client-generated IDs)
      const sessionData = {
        sessionId: sessionId,
        encryptedEmail: localStorage.getItem('encrypted_email') || '',
        encryptedCode: localStorage.getItem('encrypted_code') || '',
        consent: localStorage.getItem('consent') || '',
      };

      // Make fetch request to CORS proxy
      const response = await fetch('/api/auth/visit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'X-TractStack-Tenant': window.TRACTSTACK_CONFIG.tenantId,
        },
        body: new URLSearchParams(sessionData),
      });

      if (response.ok) {
        const data = await response.json();

        // Store backend-generated session data
        localStorage.setItem('fp_id', data.fingerprint);
        localStorage.setItem('visit_id', data.visitId);
        localStorage.setItem('consent', data.consent);

        // Store JWT token if provided
        if (data.token && localStorage.getItem('consent') === '1') {
          localStorage.setItem('profile_token', data.token);
        }

        // Update global TRACTSTACK_CONFIG if it exists
        if (window.TRACTSTACK_CONFIG) {
          window.TRACTSTACK_CONFIG.session = {
            isReady: true,
            fingerprint: data.fingerprint,
            visitId: data.visitId,
            hasProfile: data.hasProfile,
            consent: data.consent,
          };
        }

        // Also update TractStack object for compatibility
        if (window.TractStack) {
          window.TractStack.session = {
            isReady: true,
            fingerprint: data.fingerprint,
            visitId: data.visitId,
            hasProfile: data.hasProfile,
            consent: data.consent,
          };
        }

        // Dispatch session ready event
        window.dispatchEvent(
          new CustomEvent('tractstack:session-ready', {
            detail: data,
          })
        );
      } else if (response.status === 429) {
        // Rate limited - retry after delay
        setTimeout(initializeSession, 500);
      } else {
        console.error(
          'TractStack: Session handshake failed:',
          response.status,
          await response.text()
        );
      }
    } catch (error) {
      console.error('TractStack: Session initialization error:', error);
    }
  }

  // Get existing sessionId from localStorage or generate new one
  function getOrCreateSessionId() {
    const SESSION_KEY = 'tractstack_session_id';

    // Try to get existing sessionId
    let sessionId = localStorage.getItem(SESSION_KEY);

    if (!sessionId) {
      // Generate new sessionId
      const timestamp = Date.now();
      const random = Math.random().toString(36).substring(2, 11);
      sessionId = `sess_${timestamp}_${random}`;

      // Store it for future page loads
      localStorage.setItem(SESSION_KEY, sessionId);
      window.tractStackSessionId = sessionId;
    }
    // Make sessionId available globally for ProfileStorage
    window.tractStackSessionId = sessionId;

    return sessionId;
  }
</script>
