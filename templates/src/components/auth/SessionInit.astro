---
// Auto-trigger visit handshake on page load - client-side session persistence
---

<script>
  // Initialize session when DOM is ready
  document.addEventListener('DOMContentLoaded', function () {
    //console.log('DOMContentLoaded fired, calling initializeSession');
    initializeSession();
  });

  async function initializeSession() {
    //console.log('DEBUG: SessionInit - initializeSession started');

    // Wait for configuration to be available
    if (!window.TRACTSTACK_CONFIG?.configured) {
      console.log(
        'DEBUG: SessionInit - TRACTSTACK_CONFIG not ready, retrying...'
      );
      setTimeout(initializeSession, 100);
      return;
    }

    //console.log('DEBUG: SessionInit - TRACTSTACK_CONFIG ready');

    // Check and cleanup expired sessions first
    cleanupExpiredSessions();

    try {
      // Get or create persistent sessionId
      const sessionId = getOrCreateSessionId();
      //console.log('DEBUG: SessionInit - Generated sessionId:', sessionId);

      // Prepare session data (session-only, no client-generated IDs)
      const encryptedEmail = localStorage.getItem('tractstack_encrypted_email');
      const encryptedCode = localStorage.getItem('tractstack_encrypted_code');
      const consent = localStorage.getItem('tractstack_consent') || '';

      //console.log('DEBUG: SessionInit - Retrieved from localStorage:');
      //console.log('  encryptedEmail:', encryptedEmail ? 'PRESENT' : 'NULL');
      //console.log('  encryptedCode:', encryptedCode ? 'PRESENT' : 'NULL');
      //console.log('  consent:', consent);
      //console.log('  typeof encryptedEmail:', typeof encryptedEmail);
      //console.log('  typeof encryptedCode:', typeof encryptedCode);

      const sessionData = {
        sessionId: sessionId,
        consent: consent,
        ...(typeof encryptedEmail === 'string' && encryptedEmail
          ? { encryptedEmail }
          : {}),
        ...(typeof encryptedCode === 'string' && encryptedCode
          ? { encryptedCode }
          : {}),
      };

      //console.log(
      //  'DEBUG: SessionInit - Final sessionData being sent:',
      //  sessionData
      //);

      // Make fetch request to CORS proxy
      const response = await fetch('/api/auth/visit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Tenant-ID': window.TRACTSTACK_CONFIG.tenantId,
        },
        body: JSON.stringify(sessionData),
      });

      //console.log('DEBUG: SessionInit - Response status:', response.status);

      if (response.ok) {
        const data = await response.json();
        //console.log('DEBUG: SessionInit - Response data:', data);

        // Store backend-generated session data
        localStorage.setItem('tractstack_fp_id', data.fingerprint);
        localStorage.setItem('tractstack_visit_id', data.visitId);
        localStorage.setItem('tractstack_consent', data.consent);
        localStorage.setItem('tractstack_lastActive', Date.now().toString());

        // Store JWT token if provided
        if (data.token && localStorage.getItem('tractstack_consent') === '1') {
          localStorage.setItem('tractstack_profile_token', data.token);
        }

        // Update global TRACTSTACK_CONFIG if it exists
        if (window.TRACTSTACK_CONFIG) {
          window.TRACTSTACK_CONFIG.session = {
            isReady: true,
            fingerprint: data.fingerprint,
            visitId: data.visitId,
            hasProfile: data.hasProfile,
            consent: data.consent,
          };
        }

        // Also update TractStack object for compatibility
        if (window.TractStack) {
          window.TractStack.session = {
            isReady: true,
            fingerprint: data.fingerprint,
            visitId: data.visitId,
            hasProfile: data.hasProfile,
            consent: data.consent,
          };
        }

        // Dispatch session ready event
        window.dispatchEvent(
          new CustomEvent('tractstack:session-ready', {
            detail: data,
          })
        );
      } else if (response.status === 429) {
        // Rate limited - retry after delay
        setTimeout(initializeSession, 500);
      } else {
        console.error(
          'TractStack: Session handshake failed:',
          response.status,
          await response.text()
        );
      }
    } catch (error) {
      console.error('TractStack: Session initialization error:', error);
    }
  }

  // Get existing sessionId from localStorage or generate new one
  function getOrCreateSessionId() {
    const SESSION_KEY = 'tractstack_session_id';

    // Try to get existing sessionId
    let sessionId = localStorage.getItem(SESSION_KEY);

    if (!sessionId) {
      // Generate new sessionId
      const timestamp = Date.now();
      const random = Math.random().toString(36).substring(2, 11);
      sessionId = `sess_${timestamp}_${random}`;

      // Store it for future page loads
      localStorage.setItem(SESSION_KEY, sessionId);
      window.tractStackSessionId = sessionId;
    }
    // Make sessionId available globally for ProfileStorage
    window.tractStackSessionId = sessionId;

    return sessionId;
  }

  // Cleanup expired sessions based on consent
  function cleanupExpiredSessions() {
    const lastActive = localStorage.getItem('tractstack_lastActive');
    const consent = localStorage.getItem('tractstack_consent');

    if (!lastActive) return;

    const lastActiveTime = parseInt(lastActive, 10);
    const now = Date.now();
    const timeDiff = now - lastActiveTime;
    const TWO_HOURS = 2 * 60 * 60 * 1000;

    // If no consent and more than 2 hours passed, clear all tractstack data
    if (consent !== '1' && timeDiff > TWO_HOURS) {
      clearAllTractStackData();
    }
  }

  // Clear all TractStack data from localStorage
  function clearAllTractStackData() {
    const tractStackKeys = [];

    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.startsWith('tractstack_')) {
        tractStackKeys.push(key);
      }
    }

    tractStackKeys.forEach((key) => {
      localStorage.removeItem(key);
    });
  }
</script>
