---
import Layout from '@/layouts/Layout.astro';
import Header from '@/components/Header.astro';
import { getBrandConfig } from '@/stores/brand';
import StoryKeepHeader from '@/components/edit/Header';
import StoryKeepToolBar from '@/components/edit/ToolBar';
import StoryKeepToolMode from '@/components/edit/ToolMode';
import SettingsPanel from '@/components/edit/SettingsPanel';
import HudDisplay from '@/components/edit/HudDisplay';

const { slug } = Astro.params;
if (!slug) return Astro.redirect('/404');

const tenantId =
  Astro.locals.tenant?.id || import.meta.env.PUBLIC_TENANTID || 'default';
const goBackend = import.meta.env.PUBLIC_GO_BACKEND || 'http://localhost:8080';

const brandConfig = await getBrandConfig(tenantId);
if (!brandConfig.SITE_INIT) {
  return Astro.redirect('/storykeep');
}

const endpoint = `${goBackend}/api/v1/nodes/storyfragments/slug/${slug}/full-payload`;

let loadData;
try {
  const response = await fetch(endpoint, {
    headers: {
      'X-Tenant-ID': tenantId,
      Cookie: Astro.request.headers.get('cookie') || '',
    },
  });

  if (!response.ok) {
    return new Response(null, {
      status: response.status,
      statusText: response.statusText,
    });
  }

  loadData = await response.json();
  console.log('V2 Full Payload LoadData:', loadData);
} catch (error) {
  console.error('Error fetching storyfragment full payload:', error);
  const currentPath = Astro.url.pathname;
  return Astro.redirect(`/maint?from=${encodeURIComponent(currentPath)}`);
}

// Placeholder story fragment data for UI shell
const storyfragmentNode = {
  id: 'placeholder-id',
  nodeType: 'StoryFragment',
  parentId: 'parent-id',
  title: slug === 'create' ? '' : `Edit ${slug}`,
  slug: slug,
  tailwindBgColour: 'white',
  paneIds: [],
  created: new Date(),
  changed: new Date(),
  hasMenu: false,
};

//const canonicalURL = slug === brandConfig?.HOME_SLUG ? '/' : `/${slug}`;
---

<Layout
  title={storyfragmentNode.title || 'Editor'}
  brandConfig={brandConfig}
  storyfragmentId={storyfragmentNode.id}
  isEditor={true}
>
  <!-- Standard Header (scrollable) -->
  <Header
    title={storyfragmentNode.title}
    slug={slug}
    isContext={false}
    isEditable={true}
    impressions={[]}
    user={{ isAuthenticated: true, isAdmin: false, isOpenDemo: false }}
    brandConfig={brandConfig}
  />

  <!-- StoryKeep Editor Header (scroll-aware positioning) -->
  <section
    id="storykeepHeader"
    role="banner"
    class="bg-mywhite z-101 left-0 right-0 drop-shadow transition-all duration-200"
  >
    <StoryKeepHeader
      keyboardAccessibleEnabled={true}
      nodeId={storyfragmentNode.id}
      isContext={false}
      client:only="react"
    />
  </section>

  <div class="flex min-h-screen">
    <!-- Tool Navigation (mobile bottom, desktop side) -->
    <nav
      id="mainNav"
      class="bg-mywhite z-102 fixed bottom-0 left-0 right-0 pt-1.5 md:static md:fixed md:bottom-auto md:left-0 md:top-0 md:h-screen md:w-16 md:pt-0"
    >
      <div
        class="flex flex-wrap justify-around gap-4 py-3.5 md:mt-0 md:flex-col md:items-center md:gap-8 md:space-x-0 md:space-y-2 md:py-2"
      >
        <StoryKeepToolMode isContext={false} client:only="react" />
      </div>
    </nav>

    <!-- Main Content Area -->
    <main id="mainContent" class="relative flex-1">
      <div class="bg-myblue/20 bg-mylightgrey min-h-screen px-4 pb-28">
        <div
          style={{
            paddingBottom: '8rem',
            backgroundImage:
              'repeating-linear-gradient(135deg, transparent, transparent 10px, rgba(0,0,0,0.05) 10px, rgba(0,0,0,0.05) 20px)',
          }}
        >
          <!-- Placeholder for compositor -->
          <div
            class="border-mylightgrey flex min-h-96 items-center justify-center rounded-lg border-2 border-dashed bg-white/80 shadow-sm"
          >
            <div class="p-8 text-center">
              <h2 class="font-action text-myblue mb-4 text-2xl">
                Compositor Will Render Here
              </h2>
              <p class="text-mylightgrey">
                ReactNodesWrapper component will be integrated here
              </p>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Floating Controls (Settings Panel & HUD OR ToolBar) -->
  <aside
    id="settingsControls"
    class="z-100 pointer-events-none fixed bottom-24 right-0 flex max-h-screen flex-col items-end gap-2 overflow-y-auto p-4 md:bottom-0"
  >
    <div class="pointer-events-auto">
      <StoryKeepToolBar client:only="react" />
    </div>
    <div class="pointer-events-auto">
      <SettingsPanel
        availableCodeHooks={['featured-content', 'list-content', 'bunny-video']}
        client:only="react"
      />
    </div>
    <div id="hud" class="pointer-events-auto">
      <HudDisplay client:only="react" />
    </div>
  </aside>
</Layout>

<script>
  import { setupLayoutObservers, setupLayoutStyles } from '@/utils/layout';
  setupLayoutStyles();
  setupLayoutObservers();
</script>

<style>
  #hud:hover {
    opacity: 0;
    transition: opacity 0.3s ease;
  }
</style>
