---
import { ulid } from 'ulid';
import Layout from '@/layouts/Layout.astro';
import Header from '@/components/Header.astro';
import { getFullContentMap } from '@/stores/analytics';
import { getBrandConfig } from '@/stores/brand';
import { joinUrlPaths } from '@/utils/helpers';
import { handleFailedResponse } from '@/utils/backend';
import { components as codeHookComponents } from '@/custom/CodeHook.astro';
import StoryKeepHeader from '@/components/edit/Header';
import StoryKeepToolBar from '@/components/edit/ToolBar';
import StoryKeepToolMode from '@/components/edit/ToolMode';
import SettingsPanel from '@/components/edit/SettingsPanel';
import HudDisplay from '@/components/edit/HudDisplay';
import { Compositor } from '@/components/compositor/Compositor';
import { requireAdminOrEditor } from '@/utils/auth';

const { slug } = Astro.params;
if (!slug) return Astro.redirect('/404');
// Authentication check - redirect to login if not authenticated
const authCheck = requireAdminOrEditor(Astro);
if (authCheck) {
  return authCheck;
}

const tenantId =
  Astro.locals.tenant?.id || import.meta.env.PUBLIC_TENANTID || 'default';
const goBackend = import.meta.env.PUBLIC_GO_BACKEND || 'http://localhost:8080';

const brandConfig = await getBrandConfig(tenantId);
if (!brandConfig.SITE_INIT) {
  return Astro.redirect('/storykeep');
}

let loadData;
let storyFragment;
let title;
let storyFragmentID;

// Handle create mode
if (slug === 'create') {
  // Create empty storyfragment in memory
  const emptyStoryFragment = {
    id: ulid(),
    nodeType: 'StoryFragment' as const,
    parentId: null,
    title: '',
    slug: '',
    paneIds: [],
    isChanged: false,
    created: new Date(),
    changed: new Date(),
  };

  loadData = {
    storyfragmentNodes: [emptyStoryFragment],
  };

  storyFragment = emptyStoryFragment;
  title = 'Create New Page - TractStack Editor';
  storyFragmentID = emptyStoryFragment.id;
} else {
  // Existing backend fetch logic
  const endpoint = `${goBackend}/api/v1/nodes/storyfragments/slug/${slug}/full-payload`;

  try {
    const response = await fetch(endpoint, {
      headers: {
        'X-Tenant-ID': tenantId,
        Cookie: Astro.request.headers.get('cookie') || '',
      },
    });

    const failedResponse = await handleFailedResponse(
      response,
      goBackend,
      tenantId,
      Astro.url.pathname
    );
    if (failedResponse) {
      return failedResponse;
    }

    loadData = await response.json();
  } catch (error) {
    console.error('Error fetching storyfragment full payload:', error);
    return Astro.redirect(
      `/maint?from=${encodeURIComponent(Astro.url.pathname)}`
    );
  }

  // Extract data from the response
  storyFragment = loadData?.storyfragmentNodes.at(0);
  title = storyFragment?.title || `Editor`;
  storyFragmentID = storyFragment?.id;
}

const description = `Edit ${title} - TractStack Editor`;
const canonicalURL = slug === brandConfig?.HOME_SLUG ? '/' : `/${slug}`;
const fullCanonicalURL = brandConfig?.SITE_URL
  ? canonicalURL.startsWith('/')
    ? `${brandConfig.SITE_URL.replace(/\/$/, '')}${canonicalURL}`
    : `${brandConfig.SITE_URL.replace(/\/$/, '')}/${canonicalURL}`
  : canonicalURL;

// Extract dates if available
const pubDatetime = storyFragment?.created
  ? new Date(storyFragment.created)
  : undefined;
const modDatetime = storyFragment?.changed
  ? new Date(storyFragment.changed)
  : null;

// Social image from the story fragment
const ogImage = storyFragment?.socialImagePath
  ? joinUrlPaths(brandConfig?.SITE_URL || ``, storyFragment.socialImagePath)
  : undefined;

const fullContentMap = await getFullContentMap(
  Astro.locals.tenant?.id || import.meta.env.PUBLIC_TENANTID || 'default'
);
const urlParams: Record<string, string | boolean> = {};
for (const [key, value] of Astro.url.searchParams) {
  urlParams[key] = value === '' ? true : value;
}
---

<Layout
  title={title}
  description={description}
  slug={slug}
  canonicalURL={canonicalURL}
  pubDatetime={pubDatetime}
  modDatetime={modDatetime}
  ogImage={ogImage}
  brandConfig={brandConfig}
  storyfragmentId={storyFragmentID}
  isEditor={true}
>
  <!-- Standard Header (scrollable) -->
  <Header
    title={title}
    slug={slug}
    brandConfig={brandConfig}
    isContext={false}
    isStoryKeep={true}
    isEditable={false}
    menu={null}
  />

  <!-- StoryKeep Editor Header (scroll-aware positioning) -->
  <section
    id="storykeepHeader"
    role="banner"
    class="bg-mywhite z-101 left-0 right-0 drop-shadow transition-all duration-200"
  >
    <StoryKeepHeader
      slug={slug}
      nodeId={storyFragmentID}
      isContext={false}
      client:only="react"
    />
  </section>

  <div class="flex min-h-screen">
    <!-- Tool Navigation (mobile bottom, desktop side) -->
    <StoryKeepToolMode isContext={false} client:only="react" />

    <!-- Main Content Area -->
    <main id="mainContent" class="relative flex-1">
      <div class="bg-myblue/20 bg-mylightgrey h-full p-1.5">
        <div
          class="h-fit min-h-screen"
          style={{
            backgroundImage:
              'repeating-linear-gradient(135deg, transparent, transparent 10px, rgba(0,0,0,0.05) 10px, rgba(0,0,0,0.05) 20px)',
          }}
        >
          <Compositor
            id={storyFragmentID}
            nodes={loadData}
            config={brandConfig}
            fullContentMap={fullContentMap}
            fullCanonicalURL={fullCanonicalURL}
            urlParams={urlParams}
            availableCodeHooks={Object.keys(codeHookComponents)}
            client:only="react"
          />
        </div>
      </div>
    </main>
  </div>

  <!-- Floating Controls (Settings Panel & HUD OR ToolBar) -->
  <aside
    id="settingsControls"
    class="z-101 pointer-events-none fixed bottom-24 right-0 flex max-h-screen flex-col items-end gap-2 overflow-y-auto p-4 md:bottom-0"
  >
    <div class="pointer-events-auto">
      <StoryKeepToolBar client:only="react" />
    </div>
    <div class="pointer-events-auto">
      <SettingsPanel
        config={brandConfig}
        availableCodeHooks={['featured-content', 'list-content', 'bunny-video']}
        client:only="react"
      />
    </div>
    <div id="hud" class="pointer-events-auto">
      <HudDisplay client:only="react" />
    </div>
  </aside>
</Layout>

<script>
  import { setupLayoutObservers, setupLayoutStyles } from '@/utils/layout';
  setupLayoutStyles();
  setupLayoutObservers();
</script>

<style>
  #hud:hover {
    opacity: 0;
    transition: opacity 0.3s ease;
  }
</style>
