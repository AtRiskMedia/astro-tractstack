---
import Layout from '@/layouts/Layout.astro';
import CodeHook from '@/custom/CodeHook.astro';
import { getBrandConfig } from '@/stores/brand';
import { handleFailedResponse } from '@/utils/backend';
import { getFullContentMap } from '@/stores/analytics';
import { getOrSetSessionId } from '@/lib/session';

const tenantId =
  Astro.locals.tenant?.id || import.meta.env.PUBLIC_TENANTID || 'default';
const { slug } = Astro.params || {};
const lookup = slug || '';

const sessionId = await getOrSetSessionId(Astro, tenantId);

const goBackend = import.meta.env.PUBLIC_GO_BACKEND || 'http://localhost:8080';
const endpoint = lookup
  ? `${goBackend}/api/v1/nodes/storyfragments/slug/${lookup}`
  : `${goBackend}/api/v1/nodes/storyfragments/home`;

let storyData;
try {
  const response = await fetch(endpoint, {
    headers: {
      'X-Tenant-ID': tenantId,
      'X-TractStack-Session-ID': sessionId,
    },
  });
  const failedResponse = await handleFailedResponse(
    response,
    goBackend,
    tenantId,
    Astro.url.pathname
  );
  if (failedResponse) {
    return failedResponse;
  }

  storyData = await response.json();
  if (storyData.isHome && lookup !== '') {
    return Astro.redirect('/');
  }
} catch (error) {
  console.error('Error fetching storyfragment:', error);
  const currentPath = Astro.url.pathname;
  return Astro.redirect(`/maint?from=${encodeURIComponent(currentPath)}`);
}

const storyfragmentId = storyData.id;
const storyfragmentTitle = storyData.title || 'Untitled Story';
const paneIds = storyData.paneIds || [];
const codeHookTargets = storyData.codeHookTargets || {};
if (paneIds.length === 0) {
  return Astro.redirect('/storykeep');
}

let fragmentsData = {};
try {
  const batchResponse = await fetch(`${goBackend}/api/v1/fragments/panes`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Tenant-ID': tenantId,
      'X-StoryFragment-ID': storyfragmentId,
      'X-TractStack-Session-ID': sessionId,
    },
    body: JSON.stringify({ paneIds }),
  });
  if (batchResponse.ok) {
    const batchData = await batchResponse.json();
    fragmentsData = batchData.fragments || {};
    if (batchData.errors) {
      Object.entries(batchData.errors).forEach(([paneId, error]) => {
        fragmentsData[paneId] =
          `<div class="error">Failed to load pane ${paneId}: ${error}</div>`;
      });
    }
  } else {
    const failedFragmentsResponse = await handleFailedResponse(
      batchResponse,
      goBackend,
      tenantId,
      Astro.url.pathname
    );
    if (failedFragmentsResponse) {
      return failedFragmentsResponse;
    }
  }
} catch (error) {
  console.error('Error fetching fragments:', error);
  const currentPath = Astro.url.pathname;
  return Astro.redirect(`/maint?from=${encodeURIComponent(currentPath)}`);
}

if (!fragmentsData) {
  const currentPath = Astro.url.pathname;
  return Astro.redirect(`/maint?from=${encodeURIComponent(currentPath)}`);
}

const fullContentMap = await getFullContentMap(tenantId);
const description = storyData.description || 'Dynamic content from TractStack';
const brandConfig = await getBrandConfig(tenantId);

if (!brandConfig.SITE_INIT) {
  return Astro.redirect('/storykeep');
}
---

<Layout
  title={storyfragmentTitle}
  description={description}
  slug={lookup}
  menu={storyData.menu || null}
  created={storyData.created}
  isContext={false}
  isStoryKeep={false}
  isEditable={false}
  brandConfig={brandConfig}
  storyfragmentId={storyfragmentId}
  sessionId={sessionId}
>
  <main id="main-content" class="min-h-screen w-full">
    <div class="panes-container">
      {
        paneIds.map((paneId: string) => (
          <div
            key={paneId}
            id={`pane-${paneId}`}
            data-pane-id={paneId}
            class="pane-fragment-container"
            hx-get={`/api/v1/fragments/panes/${paneId}`}
            hx-trigger="refresh"
            hx-swap="innerHTML"
          >
            {codeHookTargets[paneId] ? (
              <div class="overflow-hidden">
                <CodeHook
                  target={codeHookTargets[paneId]}
                  paneId={paneId}
                  fullContentMap={fullContentMap}
                  noPaneId={true}
                />
              </div>
            ) : (
              <Fragment set:html={fragmentsData[paneId] || ''} />
            )}
          </div>
        ))
      }
    </div>
  </main>
</Layout>
