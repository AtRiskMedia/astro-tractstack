---
import Layout from '@/layouts/Layout.astro';
import StoryKeepDashboard from '@/components/storykeep/StoryKeepDashboard';
import { requireAdminOrEditor, isAuthenticated, isAdmin } from '@/utils/auth';
import { createStoryKeepMenu } from '@/utils/helpers';
import { getFullContentMap } from '@/stores/analytics';
import { getBrandConfig } from '@/stores/brand';

// DEBUG: Check auth status
const adminCookie = Astro.cookies.get('admin_auth');
const editorCookie = Astro.cookies.get('editor_auth');
const authResult = isAuthenticated(Astro);
const adminResult = isAdmin(Astro);

// Check for privileged authentication - redirect if not authenticated
const authCheck = requireAdminOrEditor(Astro);
if (authCheck) {
  return authCheck;
}

// Get backend URL and tenant info
const goBackend = import.meta.env.PUBLIC_GO_BACKEND || 'http://localhost:8080';
const tenantId = Astro.locals.tenant?.id || 'default';

try {
  const statusResponse = await fetch(`${goBackend}/api/v1/health`, {
    headers: {
      'X-Tenant-ID': tenantId,
    },
    signal: AbortSignal.timeout(5000),
  });

  if (!statusResponse.ok) {
    const currentPath = Astro.url.pathname;
    return Astro.redirect(`/maint?from=${encodeURIComponent(currentPath)}`);
  }
} catch (error) {
  const currentPath = Astro.url.pathname;
  return Astro.redirect(`/maint?from=${encodeURIComponent(currentPath)}`);
}

const userIsAuthenticated = isAuthenticated(Astro);
const userIsAdmin = isAdmin(Astro);
const role = userIsAdmin ? `admin` : userIsAuthenticated ? `editor` : null;

const brandConfig = await getBrandConfig(goBackend);
const initializing = !brandConfig.SITE_INIT;

const menu = createStoryKeepMenu({
  isAuthenticated: userIsAuthenticated,
  isAdmin: userIsAdmin,
});

const title = 'Dashboard | StoryKeep';

let fullContentMap;
let homeSlug = 'hello';

try {
  fullContentMap = await getFullContentMap();
  homeSlug = fullContentMap.find((item) => item.isHome)?.slug || 'hello';
} catch (error) {
  const currentPath = Astro.url.pathname;
  return Astro.redirect(`/maint?from=${encodeURIComponent(currentPath)}`);
}

const urlPath = Astro.url.pathname + Astro.url.search;
const tabMatch = urlPath.match(/[?&]tab=([^&]+)/);
const tabParam = tabMatch ? tabMatch[1] : null;

const validTabs = ['analytics', 'content', 'branding', 'advanced'];
const initialTab =
  tabParam && validTabs.includes(tabParam) ? tabParam : 'analytics';
---

<Layout title={title} storykeep={true} slug="storykeep" menu={menu}>
  <main id="main-content" class="min-h-screen w-full">
    <div class="p-8">
      <StoryKeepDashboard
        client:only="react"
        fullContentMap={fullContentMap}
        homeSlug={homeSlug}
        initialTab={initialTab}
        role={role}
        initializing={initializing}
      />
    </div>
  </main>
</Layout>
