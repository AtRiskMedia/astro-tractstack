---
// TractStack V2.0 Layout - Clean foundation with basic essentials

import { ClientRouter } from 'astro:transitions';
import SessionInit from '@/components/auth/SessionInit.astro';

export interface Props {
  title: string;
  description?: string;
  storykeep?: boolean;
}

const {
  title,
  description = 'TractStack dynamic website',
  storykeep = false,
} = Astro.props;

// Get context from middleware
const tenant = Astro.locals.tenant || {
  id: import.meta.env.PUBLIC_TENANTID || 'default',
  domain: Astro.url.hostname,
  isMultiTenant: false,
  isLocalhost: true,
};

// Determine CSS and font paths based on environment
const isDev = import.meta.env.DEV;
const cssBasePath = isDev ? '/styles' : '/media/css';
const fontBasePath = isDev ? '/fonts' : '/media/fonts';

const mainStylesUrl = storykeep
  ? `${cssBasePath}/storykeep.css`
  : isDev
    ? `${cssBasePath}/storykeep.css`
    : `${cssBasePath}/frontend.css`;

// Read environment variables
const goBackend = import.meta.env.PUBLIC_GO_BACKEND || 'http://localhost:8080';
const tenantId = import.meta.env.PUBLIC_TENANTID || 'default';
const storyfragmentId = Astro.params.id || '01JD2RFH35HX8MQMBJ3344KHS5';
---

<!doctype html>
<html lang="en" class="motion-safe:scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, viewport-fit=cover"
    />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <title>{title}</title>

    <!-- TractStack Styles -->
    <link rel="stylesheet" href={`${cssBasePath}/custom.css`} />
    <link rel="stylesheet" href={mainStylesUrl} />

    <!-- HTMX -->
    <script src="https://unpkg.com/htmx.org@2.0.4" crossorigin="anonymous"
    ></script>

    <!-- Zag.js Widgets -->
    <script>
      import * as zag from '@zag-js/core';
      import * as select from '@zag-js/select';
      import * as switchMachine from '@zag-js/switch';

      window.zag = { ...zag, select, switch: switchMachine };
    </script>

    <!-- Bunny player.js -->
    <script
      is:inline
      type="text/javascript"
      src="//assets.mediadelivery.net/playerjs/player-0.1.0.min.js"></script>

    <ClientRouter />
  </head>

  <body class="font-main w-full">
    <!-- Loading indicator -->
    <div
      id="loading-indicator"
      class="bg-myorange fixed left-0 top-0 z-50 h-1 w-full scale-x-0 transform transition-transform duration-300 ease-out"
    >
    </div>

    <!-- Main content wrapper -->
    <div id="content" class="transition-opacity duration-300">
      <SessionInit />
      <slot />
    </div>

    <!-- TractStack Configuration -->
    <script define:vars={{ goBackend, tenantId, fontBasePath, storyfragmentId }}
    >
      // Set up configuration that SessionInit expects
      window.TRACTSTACK_CONFIG = {
        configured: true,
        backendUrl: goBackend,
        tenantId: tenantId,
        fontBasePath: fontBasePath,
        storyfragmentId: storyfragmentId,
      };

      // Also keep the old TractStack object for compatibility
      window.TractStack = {
        config: {
          backend: goBackend,
          tenantId: tenantId,
          storyfragmentId: storyfragmentId,
        },
      };

      // Configure HTMX
      htmx.config.selfRequestsOnly = false;
      htmx.config.defaultSwapStyle = 'innerHTML';
      htmx.config.historyCacheSize = 50;
      htmx.config.requestClass = 'htmx-request';
      htmx.config.refreshOnHistoryMiss = true;

      // Set up default headers for TractStack
      document.body.addEventListener('htmx:configRequest', function (evt) {
        evt.detail.headers['X-Tenant-ID'] = tenantId;
        evt.detail.headers['X-StoryFragment-ID'] = storyfragmentId;
      });

      // Handle API errors
      document.body.addEventListener('htmx:responseError', function (evt) {
        console.error('TractStack API Error:', evt.detail);
      });

      // Loading animations for page transitions
      document.addEventListener('astro:before-preparation', () => {
        const indicator = document.getElementById('loading-indicator');
        if (indicator) {
          indicator.style.transform = 'scale-x-1';
        }
      });

      document.addEventListener('astro:after-swap', () => {
        htmx.process(document.body);
        const indicator = document.getElementById('loading-indicator');
        if (indicator) {
          indicator.style.transform = 'scale-x-0';
        }
      });
    </script>
  </body>
</html>
