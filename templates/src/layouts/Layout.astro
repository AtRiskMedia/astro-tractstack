---
// TractStack Layout - Main layout with proper session handling

export interface Props {
  title: string;
  description?: string;
}

const { title, description = 'TractStack dynamic website' } = Astro.props;

// Get context from middleware
const tenant = Astro.locals.tenant || {
  id: import.meta.env.PUBLIC_TENANTID || 'default',
  domain: Astro.url.hostname,
  isMultiTenant: false,
  isLocalhost: true
};

const session = Astro.locals.session || { isReady: false };

// Read environment variables
const goBackend = import.meta.env.PUBLIC_GO_BACKEND || 'http://127.0.0.1:8080';
const tenantId = import.meta.env.PUBLIC_TENANTID || 'default';

console.log('Layout: Tenant:', tenant);
console.log('Layout: Session:', session);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- HTMX -->
    <script 
      src="https://unpkg.com/htmx.org@2.0.4"
      crossorigin="anonymous"
    ></script>
    
    <!-- TractStack Styles -->
    <style>
      body {
        font-family: system-ui, sans-serif;
        margin: 0;
        padding: 0;
        background: var(--bg-color, #fcfcfc);
        color: var(--text-color, #10120d);
      }
      
      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1rem;
      }
      
      @media (prefers-color-scheme: dark) {
        :root {
          --bg-color: #10120d;
          --text-color: #fcfcfc;
        }
      }
      
      [data-theme="dark"] {
        --bg-color: #10120d;
        --text-color: #fcfcfc;
      }
      
      [data-theme="light"] {
        --bg-color: #fcfcfc;
        --text-color: #10120d;
      }
    </style>
  </head>
  <body>
    <!-- Session Init - only if no existing session -->
    {!session.isReady && (
      <div 
        id="session-init"
        hx-post="/api/auth/visit"
        hx-trigger="load"
        hx-vals="js:{fingerprint: localStorage.getItem('fp_id') || (function() { const cookies = document.cookie.split(';').map(c => c.trim().split('=')); const fpCookie = cookies.find(c => c[0] === 'fp_id'); return fpCookie ? fpCookie[1] : 'fp_' + Date.now().toString(36) + '_' + Math.random().toString(36).substr(2, 9); })(), visit_id: localStorage.getItem('visit_id') || (function() { const cookies = document.cookie.split(';').map(c => c.trim().split('=')); const visitCookie = cookies.find(c => c[0] === 'visit_id'); return visitCookie ? visitCookie[1] : null; })()}"
        style="display: none;"
      >
      </div>
    )}

    <slot />
    
    <!-- TractStack Session State -->
    <script define:vars={{ goBackend, tenantId, session }}>
      // Make session data available globally
      window.TractStack = {
        session: session,
        config: {
          backend: goBackend,
          tenantId: tenantId
        }
      };
      
      console.log('TractStack: Initialized with session:', session);
      
      // Configure HTMX
      htmx.config.selfRequestsOnly = false;
      htmx.config.defaultSwapStyle = 'innerHTML';
      htmx.config.historyCacheSize = 10;
      
      // Set up default headers for TractStack
      document.body.addEventListener('htmx:configRequest', function(evt) {
        evt.detail.headers['X-TractStack-Tenant'] = tenantId;
      });
      
      // Handle session handshake completion - REMOVED RELOAD
      document.body.addEventListener('htmx:afterRequest', function(evt) {
        if (evt.target && evt.target.id === 'session-init' && evt.detail.xhr.status === 200) {
          console.log('TractStack: Session handshake completed');
          console.log('TractStack: All cookies after handshake:', document.cookie);
          
          // Sync cookies to localStorage
          const fpCookie = document.cookie.split(';').find(c => c.trim().startsWith('fp_id='));
          const visitCookie = document.cookie.split(';').find(c => c.trim().startsWith('visit_id='));
          
          console.log('TractStack: Found fp_id cookie:', fpCookie);
          console.log('TractStack: Found visit_id cookie:', visitCookie);
          
          if (fpCookie) {
            localStorage.setItem('fp_id', fpCookie.split('=')[1]);
          }
          if (visitCookie) {
            localStorage.setItem('visit_id', visitCookie.split('=')[1]);
          }
        }
      });
      
      // Handle API errors
      document.body.addEventListener('htmx:responseError', function(evt) {
        console.error('TractStack API Error:', evt.detail);
      });
      
      // Dispatch session ready event for other components
      if (session.isReady) {
        window.dispatchEvent(new CustomEvent('tractstack:session-ready', {
          detail: session
        }));
        console.log('TractStack: Session ready event dispatched');
      }
    </script>
  </body>
</html>
