---
import { ClientRouter } from 'astro:transitions';
import SessionInit from '@/components/auth/SessionInit.astro';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import { getBrandConfig } from '@/stores/brand';
import type { MenuNode } from '@/types/tractstack';

export interface Props {
  title: string;
  description?: string;
  storykeep?: boolean;
  slug?: string;
  menu?: MenuNode | null;
  created?: string;
  isContext?: boolean;
  isStoryKeep?: boolean;
  isEditable?: boolean;
  brandConfig?: any;
}

const {
  title,
  description = 'TractStack dynamic website',
  storykeep = false,
  slug = '',
  menu = null,
  created,
  isContext = false,
  isStoryKeep = false,
  isEditable = false,
  brandConfig: propBrandConfig,
} = Astro.props;

// Get context from middleware
const tenant = Astro.locals.tenant || {
  id: import.meta.env.PUBLIC_TENANTID || 'default',
  domain: Astro.url.hostname,
  isMultiTenant: false,
  isLocalhost: true,
};

// Determine CSS and font paths based on environment
const isDev = import.meta.env.DEV;
const cssBasePath = isDev ? '/styles' : '/media/css';
const fontBasePath = isDev ? '/fonts' : '/media/fonts';

const mainStylesUrl = storykeep
  ? `${cssBasePath}/storykeep.css`
  : isDev
    ? `${cssBasePath}/storykeep.css`
    : `${cssBasePath}/frontend.css`;

// Read environment variables
const goBackend = import.meta.env.PUBLIC_GO_BACKEND || 'http://localhost:8080';
const tenantId = import.meta.env.PUBLIC_TENANTID || 'default';
const storyfragmentId = Astro.params.id || '01JD2RFH35HX8MQMBJ3344KHS5';

const brandConfig = propBrandConfig || (await getBrandConfig(goBackend));
---

<!doctype html>
<html lang="en" class="motion-safe:scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, viewport-fit=cover"
    />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <link rel="icon" type="image/svg+xml" href="/brand/favicon.ico" />
    <title>{title}</title>

    <!-- TractStack Styles -->
    <link rel="stylesheet" href={`${cssBasePath}/custom.css`} />
    <link rel="stylesheet" href={mainStylesUrl} />

    <!-- Bunny player.js -->
    <script
      is:inline
      type="text/javascript"
      src="//assets.mediadelivery.net/playerjs/player-0.1.0.min.js"></script>

    <!-- HTMX -->
    <script
      src="https://unpkg.com/htmx.org@2.0.4"
      crossorigin="anonymous"
      is:inline></script>

    <!-- TractStack Configuration - MOVED HERE FROM BODY -->
    <script
      define:vars={{ goBackend, tenantId, fontBasePath, storyfragmentId }}
      is:inline
    >
      // Set up configuration that SessionInit expects
      window.TRACTSTACK_CONFIG = {
        configured: true,
        backendUrl: goBackend,
        tenantId: tenantId,
        fontBasePath: fontBasePath,
        storyfragmentId: storyfragmentId,
      };

      // Also keep the old TractStack object for compatibility
      window.TractStack = {
        config: {
          backend: goBackend,
          tenantId: tenantId,
          storyfragmentId: storyfragmentId,
        },
      };

      // Configure HTMX (moved to DOMContentLoaded since HTMX needs to be loaded first)
      document.addEventListener('DOMContentLoaded', function () {
        htmx.config.selfRequestsOnly = false;
        htmx.config.defaultSwapStyle = 'innerHTML';
        htmx.config.historyCacheSize = 50;
        htmx.config.requestClass = 'htmx-request';
        htmx.config.refreshOnHistoryMiss = true;

        // Set up default headers and URL resolution for TractStack
        document.body.addEventListener('htmx:configRequest', function (evt) {
          // Handle direct Go backend API routes only
          if (evt.detail.path && evt.detail.path.startsWith('/api/v1/')) {
            // Convert relative URLs to absolute
            evt.detail.path = goBackend + evt.detail.path;

            // Add session ID if available
            const sessionId = localStorage.getItem('tractstack_session_id');
            if (sessionId) {
              evt.detail.headers['X-TractStack-Session-ID'] = sessionId;
            }
          }

          // Add tenant and storyfragment headers for all HTMX requests
          evt.detail.headers['X-Tenant-ID'] = tenantId;
          evt.detail.headers['X-StoryFragment-ID'] = storyfragmentId;
        });

        // Handle API errors
        document.body.addEventListener('htmx:responseError', function (evt) {
          console.error('TractStack API Error:', evt.detail);
        });

        // Loading animations for page transitions
        document.addEventListener('astro:before-preparation', () => {
          const indicator = document.getElementById('loading-indicator');
          if (indicator) {
            indicator.style.transform = 'scale-x-1';
          }
        });

        document.addEventListener('astro:after-swap', () => {
          htmx.process(document.body);
          const indicator = document.getElementById('loading-indicator');
          if (indicator) {
            indicator.style.transform = 'scale-x-0';
          }
        });
      });
    </script>

    <ClientRouter />
  </head>

  <body class="font-main w-full">
    <Header
      title={title}
      slug={slug}
      brandConfig={brandConfig}
      isContext={isContext}
      isStoryKeep={isStoryKeep}
      isEditable={isEditable}
      menu={menu}
    />

    <!-- Loading indicator -->
    <div
      id="loading-indicator"
      class="bg-myorange fixed left-0 top-0 z-50 h-1 w-full scale-x-0 transform transition-transform duration-300 ease-out"
    >
    </div>

    <!-- Main content wrapper -->
    <div id="content" class="transition-opacity duration-300">
      <SessionInit />
      <slot />
    </div>

    <Footer
      slug={slug}
      brandConfig={brandConfig}
      isContext={isContext}
      menu={menu}
      created={created}
      backToTop={true}
    />
  </body>
</html>
