---
import { ClientRouter } from 'astro:transitions';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import { getBrandConfig } from '@/stores/brand';
import { getOrSetSessionId } from '@/lib/session';
import type { MenuNode } from '@/types/tractstack';
import type { ImpressionNode } from '@/types/compositorTypes';

export interface Props {
  title: string;
  description?: string;
  slug?: string;
  menu?: MenuNode | null;
  created?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  ogImage?: string;
  isContext?: boolean;
  isStoryKeep?: boolean;
  isEditor?: boolean;
  isEditable?: boolean;
  brandConfig?: any;
  storyfragmentId?: string;
  sessionId?: string;
  impressions?: ImpressionNode[];
}

const {
  title,
  description = 'TractStack dynamic website',
  slug = '',
  menu = null,
  created,
  canonicalURL = Astro.url.pathname,
  pubDatetime,
  modDatetime,
  ogImage,
  isContext = false,
  isStoryKeep = false,
  isEditor = false,
  isEditable = false,
  brandConfig: propBrandConfig,
  storyfragmentId = '',
  sessionId = '',
  impressions = [],
} = Astro.props;

const isDev = import.meta.env.DEV;
const cssBasePath = isDev ? '/styles' : '/media/css';
const fontBasePath = isDev ? '/fonts' : '/media/fonts';
const mainStylesUrl = isStoryKeep
  ? `${cssBasePath}/storykeep.css`
  : isDev
    ? `${cssBasePath}/storykeep.css`
    : `${cssBasePath}/frontend.css`;
const goBackend = import.meta.env.PUBLIC_GO_BACKEND || 'http://localhost:8080';
const tenantId =
  Astro.locals.tenant?.id || import.meta.env.PUBLIC_TENANTID || 'default';

const brandConfig = propBrandConfig || (await getBrandConfig(tenantId));

// Social media and SEO setup
const defaultFavIcon = `/brand/favicon.ico`;
const defaultSocialImageURL = ogImage || brandConfig.OG || `/og.png`;
const defaultSocialLogoURL = brandConfig.OGLOGO || `/oglogo.png`;
const defaultSocialTitle =
  typeof title === `string` && title
    ? title
    : typeof brandConfig.OGTITLE === `string`
      ? brandConfig.OGTITLE
      : `TractStack dynamic website`;
const defaultSocialAuthor = brandConfig.OGAUTHOR || `TractStack`;
const defaultSocialDesc =
  description ||
  brandConfig.OGDESC ||
  `No-code website builder and content marketing platform`;
const buildVersion = (() => {
  if (modDatetime) return modDatetime.getTime();
  if (pubDatetime) return pubDatetime.getTime();
  return Date.now();
})();
const socialImageWithVersion = `${defaultSocialImageURL}?v=${buildVersion}`;
const socialLogoWithVersion = `${defaultSocialLogoURL}?v=${buildVersion}`;
const gtagId = brandConfig?.GTAG || false;
const gtagUrl =
  typeof gtagId === `string` && gtagId.length > 1
    ? `https://www.googletagmanager.com/gtag/js?id=${gtagId}`
    : null;
const fullCanonicalUrl = brandConfig?.SITE_URL
  ? canonicalURL.startsWith('/')
    ? `${brandConfig.SITE_URL.replace(/\/$/, '')}${canonicalURL}`
    : `${brandConfig.SITE_URL.replace(/\/$/, '')}/${canonicalURL}`
  : canonicalURL;
---

<!doctype html>
<html lang="en" class="motion-safe:scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, viewport-fit=cover"
    />
    <meta name="description" content={defaultSocialDesc} />
    <meta name="author" content={defaultSocialAuthor} />
    <meta name="generator" content={Astro.generator} />
    <link rel="icon" type="image/svg+xml" href={defaultFavIcon} />
    <link rel="canonical" href={fullCanonicalUrl} />
    <title>{defaultSocialTitle}</title>
    <link rel="stylesheet" href={`${cssBasePath}/custom.css`} />
    <link rel="stylesheet" href={mainStylesUrl} />
    <link rel="sitemap" href="/sitemap.xml" />

    <meta name="storyfragment-id" content={storyfragmentId} />
    <meta name="session-id" content={sessionId} />

    <meta name="title" content={defaultSocialTitle} />
    <meta
      property="og:site_name"
      content={brandConfig?.OGAUTHOR || brandConfig?.OGTITLE || 'TractStack'}
    />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta
      property="og:image:alt"
      content={`${defaultSocialTitle} - Social Preview Image`}
    />
    <meta property="og:locale" content="en_US" />

    <meta property="og:title" content={defaultSocialTitle} />
    <meta property="og:type" content="website" />
    <meta property="og:description" content={defaultSocialDesc} />
    <meta property="og:url" content={fullCanonicalUrl} />
    <meta property="og:image" content={socialImageWithVersion} />
    <meta property="og:logo" content={socialLogoWithVersion} />

    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={fullCanonicalUrl} />
    <meta property="twitter:title" content={defaultSocialTitle} />
    <meta property="twitter:description" content={defaultSocialDesc} />
    <meta property="twitter:image" content={socialImageWithVersion} />

    {
      pubDatetime && (
        <meta
          property="article:published_time"
          content={pubDatetime.toISOString()}
        />
      )
    }
    {
      modDatetime && (
        <meta
          property="article:modified_time"
          content={modDatetime.toISOString()}
        />
      )
    }

    {gtagUrl && <script async src={gtagUrl} is:inline />}
    <script is:inline define:vars={{ gtagId: brandConfig?.GTAG || '' }}>
      (function () {
        if (gtagId && gtagId.length > 1) {
          window.dataLayer = window.dataLayer || [];
          window.gtag =
            window.gtag ||
            function () {
              window.dataLayer.push(arguments);
            };

          window.gtag('js', new Date());
          window.gtag('config', gtagId);

          document.addEventListener('astro:after-swap', () => {
            window.gtag('config', gtagId);
          });
        }
      })();
    </script>

    <ClientRouter />

    <script
      is:inline
      type="text/javascript"
      src="//assets.mediadelivery.net/playerjs/player-0.1.0.min.js"></script>

    <script
      src="https://unpkg.com/htmx.org@2.0.4"
      crossorigin="anonymous"
      is:inline
      is:persist></script>

    <script
      define:vars={{
        goBackend,
        tenantId,
        fontBasePath,
        storyfragmentId,
        sessionId,
      }}
      is:inline
    >
      function createTractstackConfig() {
        window.TRACTSTACK_CONFIG = {
          configured: true,
          backendUrl: goBackend,
          tenantId: tenantId,
          fontBasePath: fontBasePath,
          storyfragmentId: storyfragmentId,
          sessionId: sessionId,
        };
      }

      function updateTractstackConfig() {
        // Get current values from meta tags
        const storyfragmentMeta = document.querySelector(
          'meta[name="storyfragment-id"]'
        );
        const sessionMeta = document.querySelector('meta[name="session-id"]');

        const currentStoryfragmentId = storyfragmentMeta
          ? storyfragmentMeta.content
          : storyfragmentId;
        const currentSessionId = sessionMeta ? sessionMeta.content : sessionId;

        if (window.TRACTSTACK_CONFIG) {
          window.TRACTSTACK_CONFIG.storyfragmentId = currentStoryfragmentId;
          window.TRACTSTACK_CONFIG.sessionId = currentSessionId;
        } else {
          createTractstackConfig();
        }
      }

      // Check if config exists. If not, create it. This handles the very first load.
      if (!window.TRACTSTACK_CONFIG) {
        createTractstackConfig();
      }

      // Update on subsequent loads, or set for the first time if script runs after initial setup
      document.addEventListener('astro:page-load', updateTractstackConfig);
    </script>
  </head>
  <body class="font-main w-full">
    {
      !isEditor && (
        <Header
          title={title}
          slug={slug}
          brandConfig={brandConfig}
          isContext={isContext}
          isStoryKeep={isStoryKeep}
          isEditable={isEditable}
          sessionId={sessionId}
          menu={menu}
          storyfragmentId={storyfragmentId}
          impressions={impressions}
        />
      )
    }
    <div
      id="loading-indicator"
      class="bg-myorange fixed left-0 top-0 z-50 h-1 w-full scale-x-0 transform transition-transform duration-300 ease-out"
    >
    </div>
    <div id="content" class="transition-opacity duration-300">
      <slot />
    </div>
    {
      !isEditor && (
        <Footer
          slug={slug}
          brandConfig={brandConfig}
          isContext={isContext}
          menu={menu}
          created={created}
          backToTop={true}
        />
      )
    }
    <script type="module" is:inline is:persist>
      import '/src/client/sse.js';
      import '/src/client/belief-events.js';
      import '/src/client/analytics-events.js';
    </script>
  </body>
</html>
